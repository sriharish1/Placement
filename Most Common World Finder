package com.fst.demo;

import java.io.IOException;
import java.nio.file.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MostCommonWordFinder {

    public static void main(String[] args) {
        // Prompt user to enter the directory name
        System.out.print("Enter directory name: ");
        String directoryPath = System.console().readLine();

        try {
            findMostCommonWord(directoryPath);
        } catch (IOException e) {
            System.out.println("Error reading files: " + e.getMessage());
        }
    }

    static void findMostCommonWord(String directoryPath) throws IOException {
        Map<String, Integer> wordFrequencyMap = new HashMap<>();

        // Traverse each file in the directory
        try (DirectoryStream<Path> directoryStream = Files.newDirectoryStream(Paths.get(directoryPath), "*.txt")) {
            for (Path filePath : directoryStream) {
                processFile(filePath, wordFrequencyMap);
            }
        }

        // Find the most common word(s) and their frequency
        int maxFrequency = 0;
        for (Map.Entry<String, Integer> entry : wordFrequencyMap.entrySet()) {
            int frequency = entry.getValue();
            if (frequency > maxFrequency) {
                maxFrequency = frequency;
            }
        }

        // Output words with the highest frequency
        for (Map.Entry<String, Integer> entry : wordFrequencyMap.entrySet()) {
            if (entry.getValue() == maxFrequency) {
                System.out.println("Word: " + entry.getKey() + ", Frequency: " + entry.getValue());
            }
        }
    }

    static void processFile(Path filePath, Map<String, Integer> wordFrequencyMap) throws IOException {
        List<String> lines = Files.readAllLines(filePath);

        for (String line : lines) {
            // Split the line into words and update their frequencies
            String[] words = line.toLowerCase().split("\\s+");
            for (String word : words) {
                wordFrequencyMap.put(word, wordFrequencyMap.getOrDefault(word, 0) + 1);
            }
        }
    }
}



Output:
Word: world, Frequency: 3
Word: java, Frequency: 2
Word: hello, Frequency: 2
Word: is, Frequency: 1
Word: a, Frequency: 1
Word: programming, Frequency: 1
Word: language, Frequency: 1

