package com.fst.demo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class PartitionAndMerge {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        int partitionSize = 2;
        int[] partitionOrder = {3, 2, 1};

        List<List<Integer>> partitions = partitionArray(array, partitionSize);
        List<Integer> result = mergePartitions(partitions, partitionOrder);

        System.out.println("Input Array: " + Arrays.toString(array));
        System.out.println("Partition Size: " + partitionSize);
        System.out.println("Partition Order: " + Arrays.toString(partitionOrder));
        System.out.println("Output: " + result);
    }

    // Function to partition the array into lists of specified size
    private static List<List<Integer>> partitionArray(int[] array, int partitionSize) {
        List<List<Integer>> partitions = new ArrayList<>();
        for (int i = 0; i < array.length; i += partitionSize) {
            int end = Math.min(i + partitionSize, array.length);
            List<Integer> partition = new ArrayList<>();
            for (int j = i; j < end; j++) {
                partition.add(array[j]);
            }
            partitions.add(partition);
        }
        return partitions;
    }

    // Function to merge partitions based on the specified order
    private static List<Integer> mergePartitions(List<List<Integer>> partitions, int[] partitionOrder) {
        List<Integer> result = new ArrayList<>();
        for (int order : partitionOrder) {
            if (order >= 1 && order <= partitions.size()) {
                List<Integer> partition = partitions.get(order - 1);
                result.addAll(partition);
            }
        }
        return result;
    }
}
