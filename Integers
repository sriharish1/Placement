#include <stdio.h>
#include <stdlib.h>

int* plusOne(int* digits, int digitsSize, int* returnSize) {
    // Iterate through the digits in reverse order
    for (int i = digitsSize - 1; i >= 0; i--) {
        // Increment the current digit
        digits[i]++;

        // If the incremented digit is less than 10, we're done
        if (digits[i] < 10) {
            *returnSize = digitsSize;
            return digits;
        }

        // If the digit becomes 10, set it to 0 and continue with the next digit
        digits[i] = 0;
    }

    // If we reach here, all digits were 9, and we need to add a new most significant digit
    int* result = (int*)malloc((digitsSize + 1) * sizeof(int));
    result[0] = 1;  // New most significant digit is 1
    *returnSize = digitsSize + 1;

    // Copy the remaining digits (which are now 0) to the result array
    for (int i = 1; i <= digitsSize; i++) {
        result[i] = 0;
    }

    return result;
}

int main() {
    // Example 1
    int digits1[] = {1, 2, 3};
    int size1 = sizeof(digits1) / sizeof(digits1[0]);
    int returnSize1;
    int* result1 = plusOne(digits1, size1, &returnSize1);

    // Print the result
    printf("Example 1: ");
    for (int i = 0; i < returnSize1; i++) {
        printf("%d ", result1[i]);
    }
    printf("\n");

    // Example 2
    int digits2[] = {9};
    int size2 = sizeof(digits2) / sizeof(digits2[0]);
    int returnSize2;
    int* result2 = plusOne(digits2, size2, &returnSize2);

    // Print the result
    printf("Example 2: ");
    for (int i = 0; i < returnSize2; i++) {
        printf("%d ", result2[i]);
    }
    printf("\n");

    // Don't forget to free the dynamically allocated memory
    free(result1);
    free(result2);

    return 0;
}
